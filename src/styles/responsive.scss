@import "./util.scss";

/*
 *
 * A CSS file that mananges all the break points
 * 
 * Referenced Article
 * https: //medium.com/codeartisan/breakpoints-and-media-queries-in-scss-46e8f551e2f2
 * 
 */

$breakpoint-s: 600px;
$breakpoint-m: 800px;
$breakpoint-l: 1000px;
$breakpoint-xl: 1200px;

// function for creating dynamic size based on viewport
$stopScalingAt: strip-unit($breakpoint-l); // in pixel
// Caution: the unit in this function must be PIXEL
@function get-vw($target, $contextViewportWidth) {
  $vw-context: ($contextViewportWidth * 0.01) * 1px;
  @return ($target/$vw-context) * 1vw;
}
@function responsiveSize($min, $max) {
  @return clamp($min, get-vw($max, $stopScalingAt), $max);
}

@mixin viewportLargerThan($screen) {
  @media only screen and (min-width: $screen) {
    @content;
  }
}

@mixin viewportSmallerThan($screen) {
  @media only screen and (max-width: $screen) {
    @content;
  }
}

@mixin viewportTallerThan($screenHeight) {
  @media only screen and (min-height: $screenHeight) {
    @content;
  }
}

@mixin fluid-size($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}
